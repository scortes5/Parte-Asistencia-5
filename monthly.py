import datetime as dt
import locale
import os

import openpyxl
import openpyxl.styles
import openpyxl.drawing.image as image
import openpyxl.worksheet.pagebreak as pagebreak
import openpyxl.worksheet.properties as properties
import pandas as pd
import babel.numbers

import config
import gui


def generate() -> int:

    # TODO: Add comments

    locale.setlocale(locale.LC_ALL, 'es_CL.utf8')

    # Welcome
    gui.show_message(title="Reportes mensuales",
                     message="Se generarán de manera automática el cuadro mensual y el parte de asistencia, a partir "
                             "del archivo que se puede descargar desde Quintanet.\n"
                             "A continuación deberá cargar el archivo .xls obtenido en Quintanet. Es importante "
                             "haber seleccionado las fechas correspondientes a un solo mes, y haber desmarcado "
                             "la opción “Solo obligatorios”.",
                     button_text="Cargar archivo")

    # Ask user for Excel file path
    # Defaults to excel.html
    file = gui.get_file()
    if file == "":
        return 1

    # If file extension is .xls change it to .html
    if file[-4:] == ".xls":
        os.rename(file, file[:-4] + ".html")
        file = file[:-4] + ".html"

    # Load table to a pandas dataframe and drop the last seven columns
    # Those columns are statistics generated by Quintanet that we'll calculate again
    df = pd.DataFrame(pd.read_html(file)[0])
    df = df.drop(columns=["Oblig.", "Asist.", "Faltas", "Licencias", "% Oblig.", "% Sin Licencia",
                          "Series de 5 Faltas"])

    # Rename columns
    df = df.rename(columns={"Orden": "Ant.", "Voluntario.1": "Cargo"})

    # Sort by seniority and update that numbers
    df = df.sort_values("Ant.")
    df = df.reset_index(drop=True)
    for i in range(len(df.index)):
        df.at[i, "Ant."] = i + 1

    # Add lines for date, hours and type
    col_names = df.columns.tolist()

    # Review acts
    for act in col_names[3:]:
        day = f"{int(act[0:2]):02d}/{int(act[3:5]):02d}"
        time = f"{int(act[12:14]):02d}:{int(act[15:17]):02d}"

        # Detect ROG, change it to REG
        if act[19:] == "ROG":
            gui.show_message(title="Alerta: ROG",
                             message=f"Se detectó una ROG el {day} a las {time}.\n"
                                     f"El reglamento de Compañía señala que todas las reuniones citadas por el "
                                     f"Directorio serán extraordinarias, por lo que se cambió automáticamente "
                                     f"la “Reunión Ordinaria General” a “Reunión a Extraordinaria”."
                             )
            df.rename(columns={act: f"{act[:19]}REG"}, inplace=True)

        # Detect 10-1, ask for correct classification
        elif act[19:] == "10-1":
            options = ["10-1-1", "10-1-2", "10-1-3", "10-1-4",
                       "10-1-5", "10-1-6", "10-1-7", "10-1-8"]
            correct_act = gui.show_options(options, title="Alerta: 10-1",
                                           message=f"Se detectó un 10-1 el {day} a las {time}.\n"
                                                   f"Indique la subclasificación que corresponde.")
            df.rename(columns={act: f"{act[:19]}{correct_act}"}, inplace=True)

        # Detect 10-6, ask for correct classification
        elif act[19:] == "10-6":
            options = ["10-6-1", "10-6-2", "10-6-3"]
            correct_act = gui.show_options(options, title="Alerta: 10-6",
                                           message=f"Se detectó un 10-6 el {day} a las {time}.\n"
                                                   f"Indique la subclasificación que corresponde.")
            df.rename(columns={act: f"{act[:19]}{correct_act}"}, inplace=True)

        # Detect FDoM, ask if it's a FDoM or a FQ
        elif act[19:] == "FDoM":
            options = ["FDoM", "FQ"]
            correct_act = gui.show_options(options, title="Alerta: Funeral",
                                           message=f"Se detectó un funeral el {day} a las {time}.\n"
                                                   f"Indique a que acto corresponde en realidad:\n"
                                                   f"\t• Funeral de mártir o miembro del directorio\n"
                                                   f"\t• Funeral de quintino")
            df.rename(columns={act: f"{act[:19]}{correct_act}"}, inplace=True)

        # Detect 10-17-3, ask if it's a 10-0-6, 10-17 or 10-18
        elif act[19:] == "10-7-3":
            options = ["10-0-6", "10-17", "10-18"]
            correct_act = gui.show_options(options, title="Alerta: 10-7-3",
                                           message=f"Se detectó un 10-7-3 el {day} a las {time}.\n"
                                                   f"Indique a que acto corresponde en realidad.")
            if correct_act == "10-17":
                options = ["10-17-0", "10-17-1", "10-17-2", "10-17-3", "10-17-4",
                           "10-17-5", "10-17-6", "10-17-7", "10-17-8"]
                correct_act = gui.show_options(options, title="Alerta: 10-7-3",
                                               message="Indique la subclasificación que corresponde.")
            if correct_act == "10-18":
                options = ["10-18-0", "10-18-1", "10-18-2", "10-18-3", "10-18-4",
                           "10-18-5", "10-18-6", "10-18-7", "10-18-8"]
                correct_act = gui.show_options(options, title="Alerta: 10-7-3",
                                               message="Indique la subclasificación que corresponde.")
            df.rename(columns={act: f"{act[:19]}{correct_act}"}, inplace=True)

        # Detect DE, ask if it's a DE or EJ-G
        elif act[19:] == "DE":
            options = ["DE", "EJ-G"]
            correct_act = gui.show_options(options, title="Alerta: Delegación",
                                           message=f"Se detectó una delegación el {day} a las {time}.\n"
                                                   f"Indique a que acto corresponde en realidad:\n"
                                                   f"\t• Delegación\n"
                                                   f"\t• Ejercicio de guardia")
            df.rename(columns={act: f"{act[:19]}{correct_act}"}, inplace=True)

    col_names = df.columns.tolist()

    dates = ["", "", "Fecha"]
    hours = ["", "", "Hora"]
    acts = ["", "", "Acto"]
    bonus = ["", "", "ABH"]
    for col in col_names[3:]:
        dates.append(dt.date(int(col[6:10]), int(col[3:5]), int(col[0:2])))
        hours.append(dt.time(int(col[12:14]), int(col[15:17])).strftime("%H:%M"))
        acts.append(col[19:])
        bonus.append("")

    # Ask for bonus lists
    act_with_bonus = True
    while act_with_bonus:
        act_with_bonus = gui.select_act(col_names[3:], title="Abono por horas",
                                        message="Selecciona un acto con abono por horas",
                                        button_text="Seleccionar")
        if not act_with_bonus:
            break
        index = col_names[3:].index(act_with_bonus[:-4]) + 3
        bonus[index] = int(act_with_bonus[-2:])

    dates_dict = {col_names[i]: [dates[i]] for i in range(len(col_names))}
    dates_df = pd.DataFrame(dates_dict)
    hours_dict = {col_names[i]: [hours[i]] for i in range(len(col_names))}
    hours_df = pd.DataFrame(hours_dict)
    acts_dict = {col_names[i]: [acts[i]] for i in range(len(col_names))}
    acts_df = pd.DataFrame(acts_dict)
    bonus_dict = {col_names[i]: [bonus[i]] for i in range(len(col_names))}
    bonus_df = pd.DataFrame(bonus_dict)
    df = pd.concat([dates_df, hours_df, acts_df, bonus_df, df])

    seniority_20 = df[df["Voluntario"] == config.last_with_20]["Ant."].values[0]
    df["Ant."] = pd.to_numeric(df["Ant."])
    for series_name, _ in df.iloc[:, 3:].items():
        # Change “F” from volunteers with more than 20 years to “-”
        df[series_name] = df[series_name].mask(
            (df["Ant."] <= seniority_20) & (df[series_name] == "F"), "-", inplace=False
        )

        # Change “-” from honorary volunteers with less than 20 years to “F”
        if series_name[19:] in config.mandatory_for_honoraries:
            df[series_name] = df[series_name].mask(
                (df["Ant."] > seniority_20)
                & (df["Cargo"] == "Voluntario Activo")
                & (df[series_name] == "-"),
                "F", inplace=False
            )

        # Change “-” from officers to “F” (captain, lieutenants, assistants)
        if (series_name[19:] in config.dept_mandatory_acts
                or series_name[19:] in config.comp_mandatory_acts):
            df[series_name] = df[series_name].mask(
                ((df["Cargo"] == "Capitán") |
                 (df["Cargo"] == "Teniente Primero") |
                 (df["Cargo"] == "Teniente Segundo") |
                 (df["Cargo"] == "Teniente Tercero") |
                 (df["Cargo"] == "Ayudante")
                 )
                & (df[series_name] == "-"),
                "F", inplace=False
            )

        # Change “-” from officers to “F” (engineer)
        if ((series_name[19:] in config.dept_mandatory_acts
             or series_name[19:] in config.comp_mandatory_acts)
                and series_name[19:] not in ["FU", "RG"]):
            df[series_name] = df[series_name].mask(
                (df["Cargo"] == "Maquinista")
                & (df[series_name] == "-"),
                "F", inplace=False
            )

        # Change “-” from officers to “F” (secretary, treasurer, intendent)
        if ((series_name[19:] in config.dept_mandatory_acts
             or series_name[19:] in config.comp_mandatory_acts)
                and series_name[19:] not in ["FU", "RG", "EJ-GEN", "EJ", "10-34", "10-30"]):
            df[series_name] = df[series_name].mask(
                ((df["Cargo"] == "Secretario") |
                 (df["Cargo"] == "Tesorero") |
                 (df["Cargo"] == "Intendente")
                 )
                & (df[series_name] == "-"),
                "F", inplace=False
            )

    # Calculate statistics
    dept_mandatory = ["", "", "", "Ob. Gen."]
    comp_mandatory = ["", "", "", "Ob. Cía."]
    others = ["", "", "", "Ab."]
    total = ["", "", "", "Total"]

    abh = df.iloc[3, 3:].tolist()
    for n, item in enumerate(abh):
        if item == "":
            abh[n] = 1
        else:
            abh[n] = int(abh[n])+1

    sum_dept_mandatory = 0
    sum_comp_mandatory = 0
    sum_others = 0

    for _, row in df.iterrows():
        if row["Ant."] >= 1:
            series_count = 0
            for series_name, series in row.items():
                if series_name == "Ant." or series_name == "Voluntario" or series_name == "Cargo":
                    continue
                if series == "A":
                    if series_name[19:] in config.dept_mandatory_acts:
                        sum_dept_mandatory += 1
                        sum_others += abh[series_count] - 1
                    elif series_name[19:] in config.comp_mandatory_acts:
                        sum_comp_mandatory += 1
                        sum_others += abh[series_count] - 1
                    else:
                        sum_others += abh[series_count]
                series_count += 1
            dept_mandatory.append(sum_dept_mandatory)
            comp_mandatory.append(sum_comp_mandatory)
            others.append(sum_others)
            total.append(sum_dept_mandatory + sum_comp_mandatory + sum_others)
            sum_dept_mandatory = 0
            sum_comp_mandatory = 0
            sum_others = 0

    df["Ob. Gen."] = dept_mandatory
    df["Ob. Cía."] = comp_mandatory
    df["Ab."] = others
    df["Total"] = total

    df = df.copy()

    # Export excel: full monthly report
    name = f"{dates[3].year}-{dates[3].month:02d}"
    name = "Cuadro Mensual - " + name + ".xlsx"
    df.to_excel(name)

    # Open output to format
    wb = openpyxl.load_workbook(name)
    ws = wb.active

    # Remove extra columns
    ws.delete_cols(1)
    ws.delete_rows(1)

    # Define border to apply later
    border_color = openpyxl.styles.Side(border_style="thin", color='000000')
    border = openpyxl.styles.Border(left=border_color, right=border_color,
                                    top=border_color, bottom=border_color)

    # Add title
    ws.title = f"{dates[3].year}-{dates[3].month:02d}"
    ws["B1"] = "5.ª Compañía"
    ws["B2"] = "Cuadro Mensual"
    month = f"{dates[3].strftime("%B")} del {dates[3].year}"[0].upper()
    month += f"{dates[3].strftime("%B")} del {dates[3].year}"[1:]
    ws["B3"] = month
    ws["B1"].font = openpyxl.styles.Font(bold=True, color="FFFFFF")
    ws["B2"].font = openpyxl.styles.Font(bold=True, color="FFFFFF")
    ws["B3"].font = openpyxl.styles.Font(bold=True, color="FFFFFF")
    ws["A1"].border = openpyxl.styles.Border(top=border_color)
    ws["B1"].border = openpyxl.styles.Border(top=border_color)
    ws["A1"].border = openpyxl.styles.Border(left=border_color)
    ws["A2"].border = openpyxl.styles.Border(left=border_color)
    ws["A3"].border = openpyxl.styles.Border(left=border_color)
    ws["A4"].border = openpyxl.styles.Border(left=border_color)
    ws["A1"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["A2"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["A3"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["A4"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["B1"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["B2"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["B3"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["B4"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")

    # Format dates, hours and acts
    ws["C1"].alignment = openpyxl.styles.Alignment(horizontal="right")
    ws["C2"].alignment = openpyxl.styles.Alignment(horizontal="right")
    ws["C3"].alignment = openpyxl.styles.Alignment(horizontal="right")
    ws["C4"].alignment = openpyxl.styles.Alignment(horizontal="right")
    ws["C1"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
    ws["C2"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
    ws["C3"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
    ws["C4"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
    ws["C1"].font = openpyxl.styles.Font(bold=True)
    ws["C2"].font = openpyxl.styles.Font(bold=True)
    ws["C3"].font = openpyxl.styles.Font(bold=True)
    ws["C4"].font = openpyxl.styles.Font(bold=True)
    ws["C1"].border = border
    ws["C2"].border = border
    ws["C3"].border = border
    ws["C4"].border = border

    col = "D"
    to_check = ws[f"{col}1"]
    while to_check.value is not None:
        ws[f"{col}1"].number_format = "dd/mm"
        ws[f"{col}2"].number_format = "hh:mm"
        ws[f"{col}4"].number_format = '"(+"####" ABH)"'
        ws[f"{col}1"].alignment = openpyxl.styles.Alignment(horizontal="center")
        ws[f"{col}2"].alignment = openpyxl.styles.Alignment(horizontal="center")
        ws[f"{col}3"].alignment = openpyxl.styles.Alignment(horizontal="center")
        ws[f"{col}4"].alignment = openpyxl.styles.Alignment(horizontal="center")
        ws[f"{col}1"].font = openpyxl.styles.Font(bold=True)
        ws[f"{col}2"].font = openpyxl.styles.Font(bold=True)
        ws[f"{col}3"].font = openpyxl.styles.Font(bold=True)
        ws[f"{col}4"].font = openpyxl.styles.Font(bold=True, size=8)
        ws[f"{col}1"].border = border
        ws[f"{col}2"].border = border
        ws[f"{col}3"].border = border
        ws[f"{col}4"].border = border
        ws[f"{col}1"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
        ws[f"{col}2"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
        ws[f"{col}3"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
        ws[f"{col}4"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
        ws.column_dimensions[col].width = 7
        if col[-1:] == "Z":
            if len(col) == 1:
                col = "AA"
            else:
                col = f"{chr(ord(col[0]) + 1)}A"
        else:
            if len(col) == 1:
                col = f"{chr(ord(col[0]) + 1)}"
            else:
                col = f"{col[0]}{chr(ord(col[-1:]) + 1)}"
        to_check = ws[f"{col}1"]

    # Format statistics
    for i in range(4):
        ws.merge_cells(f"{col}1:{col}4")
        to_check = ws[f"{col}1"]
        to_check.fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
        to_check.font = openpyxl.styles.Font(bold=True, color="FFFFFF")
        to_check.alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center",
                                                       wrap_text=True)
        ws.column_dimensions[col].width = 7
        match i:
            case 0:
                ws[f"{col}1"] = "Ob. Gen."
            case 1:
                ws[f"{col}1"] = "Ob. Cía."
            case 2:
                ws[f"{col}1"] = "Ab."
            case 3:
                ws[f"{col}1"] = "Total"

        if col[-1:] == "Z":
            if len(col) == 1:
                col = "AA"
            else:
                col = f"{chr(ord(col[0]) + 1)}A"
        else:
            if len(col) == 1:
                col = f"{chr(ord(col[0]) + 1)}"
            else:
                col = f"{col[0]}{chr(ord(col[-1:]) + 1)}"

    # Format names and attendance
    ws.column_dimensions["A"].width = 5
    ws.column_dimensions["B"].width = 32
    ws.column_dimensions["C"].width = 20

    row = 5
    while ws[f"A{row}"].value is not None:
        ws.row_dimensions[row].height = 30
        ws[f"B{row}"].font = openpyxl.styles.Font(bold=True)
        ws[f"A{row}"].alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
        ws[f"B{row}"].alignment = openpyxl.styles.Alignment(vertical="center", wrap_text=True)
        ws[f"C{row}"].alignment = openpyxl.styles.Alignment(vertical="center", wrap_text=True)
        ws[f"A{row}"].border = border
        ws[f"B{row}"].border = border
        ws[f"C{row}"].border = border

        col = "D"
        to_check = ws[f"{col}{row}"]
        while to_check.value is not None:
            to_check.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
            to_check.border = border
            if to_check.value == "A":
                to_check.font = openpyxl.styles.Font(color="004000")
                to_check.fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
            elif to_check.value == "F":
                to_check.font = openpyxl.styles.Font(color="974706")
                to_check.fill = openpyxl.styles.PatternFill("solid", fgColor="FABF8F")
            elif to_check.value == "L":
                to_check.font = openpyxl.styles.Font(color="244062")
                to_check.fill = openpyxl.styles.PatternFill("solid", fgColor="95B3D7")
            elif to_check.value == "S" or to_check.value == "R":
                to_check.font = openpyxl.styles.Font(color="0D0D0D")
                to_check.fill = openpyxl.styles.PatternFill("solid", fgColor="A6A6A6")

            if col[-1:] == "Z":
                if len(col) == 1:
                    col = "AA"
                else:
                    col = f"{chr(ord(col[0]) + 1)}A"
            else:
                if len(col) == 1:
                    col = f"{chr(ord(col[0]) + 1)}"
                else:
                    col = f"{col[0]}{chr(ord(col[-1:]) + 1)}"
            to_check = ws[f"{col}{row}"]
        row += 1

    # Save formatted excel
    ws.freeze_panes = ws["D5"]
    wb.save(name)
    wb.close()

    # Create new workbook for simple report
    wb = openpyxl.Workbook()
    ws = wb.active

    # Set white background and vertical center alignment
    for col in ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q"]:
        for n in range(200):
            ws[f"{col}{n+1}"].fill = openpyxl.styles.PatternFill("solid", fgColor="FFFFFF")
            ws[f"{col}{n+1}"].alignment = openpyxl.styles.Alignment(vertical="center")

    # Set columns width
    for col in ["A", "I", "Q"]:
        ws.column_dimensions[col].width = 15
    for col in ["B", "D", "E", "F", "G", "H", "J", "L", "M", "N", "O", "P"]:
        ws.column_dimensions[col].width = 6
    for col in ["C", "K"]:
        ws.column_dimensions[col].width = 41

    # Add titles
    ws["I4"] = "Parte mensual de asistencia"
    ws["I104"] = "Resumen de actos"
    ws["I5"] = month
    ws["I105"] = month
    for cell in ["I4", "I5", "I104", "I105"]:
        ws[cell].font = openpyxl.styles.Font(bold=True)
        ws[cell].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")

    # Add company number
    border_thick = openpyxl.styles.Side(border_style="thick", color="000000")
    border_thin = openpyxl.styles.Side(border_style="thin", color="000000")
    ws.merge_cells("L3:P3")
    ws.merge_cells("L4:P5")
    ws["L3"].border = openpyxl.styles.Border(top=border_thick, left=border_thick)
    ws["M3"].border = openpyxl.styles.Border(top=border_thick)
    ws["N3"].border = openpyxl.styles.Border(top=border_thick)
    ws["O3"].border = openpyxl.styles.Border(top=border_thick)
    ws["P3"].border = openpyxl.styles.Border(top=border_thick, right=border_thick)
    ws["L4"].border = openpyxl.styles.Border(left=border_thick)
    ws["P4"].border = openpyxl.styles.Border(right=border_thick)
    ws["L5"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick)
    ws["M5"].border = openpyxl.styles.Border(bottom=border_thick)
    ws["N5"].border = openpyxl.styles.Border(bottom=border_thick)
    ws["O5"].border = openpyxl.styles.Border(bottom=border_thick)
    ws["P5"].border = openpyxl.styles.Border(bottom=border_thick, right=border_thick)
    ws["L3"] = "Compañía"
    ws["L4"] = "5.ª"
    ws["L3"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
    ws["L4"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
    ws["L3"].font = openpyxl.styles.Font(bold=True)
    ws["L4"].font = openpyxl.styles.Font(size="22", bold=True)
    ws.merge_cells("L103:P103")
    ws.merge_cells("L104:P105")
    ws["L103"].border = openpyxl.styles.Border(top=border_thick, left=border_thick)
    ws["M103"].border = openpyxl.styles.Border(top=border_thick)
    ws["N103"].border = openpyxl.styles.Border(top=border_thick)
    ws["O103"].border = openpyxl.styles.Border(top=border_thick)
    ws["P103"].border = openpyxl.styles.Border(top=border_thick, right=border_thick)
    ws["L104"].border = openpyxl.styles.Border(left=border_thick)
    ws["P104"].border = openpyxl.styles.Border(right=border_thick)
    ws["L105"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick)
    ws["M105"].border = openpyxl.styles.Border(bottom=border_thick)
    ws["N105"].border = openpyxl.styles.Border(bottom=border_thick)
    ws["O105"].border = openpyxl.styles.Border(bottom=border_thick)
    ws["P105"].border = openpyxl.styles.Border(bottom=border_thick, right=border_thick)
    ws["L103"] = "Compañía"
    ws["L104"] = "5.ª"
    ws["L103"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
    ws["L104"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
    ws["L103"].font = openpyxl.styles.Font(bold=True)
    ws["L104"].font = openpyxl.styles.Font(size="22", bold=True)

    # Add logos
    logo1 = image.Image(gui.resource_path("logocbs.png"))
    logo2 = image.Image(gui.resource_path("logocbs.png"))
    logo1.anchor = "B1"
    logo2.anchor = "B101"
    factor = logo1.height / 100
    logo1.height = 100
    logo1.width = logo1.width / factor
    factor = logo2.height / 100
    logo2.height = 100
    logo2.width = logo2.width / factor
    ws.add_image(logo1)
    ws.add_image(logo2)

    # Add signature
    ws["I155"].border = openpyxl.styles.Border(top=border_thin)
    ws["J155"].border = openpyxl.styles.Border(top=border_thin)
    ws.merge_cells("I155:J155")
    ws.merge_cells("I156:J156")
    ws["I155"].alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
    ws["I156"].alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
    ws["I155"] = config.captain_name
    ws["I156"] = "Capitán"
    signature = image.Image("firma.png")
    signature.anchor = "I150"
    factor = signature.height / 90
    signature.height = 90
    signature.width = signature.width / factor
    ws.add_image(signature)
    stamp  = image.Image(gui.resource_path("stamp.png"))
    stamp.anchor = "K152"
    stamp.height = 90
    stamp.width = 90
    ws.add_image(stamp)

    # Create blank tables and color them
    for row in [107, 116, 127]:
        ws.merge_cells(f"B{row}:P{row}")
    for row in list(range(108, 114)) + list(range(117, 125)) + list(range(128, 144)):
        ws.merge_cells(f"B{row}:D{row}")
        ws.merge_cells(f"E{row}:H{row}")
        ws.merge_cells(f"I{row}:P{row}")
        for col in ["B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P"]:
            ws[f"{col}{row}"].border = openpyxl.styles.Border(bottom=border_thin)
        ws[f"E{row}"].border = openpyxl.styles.Border(left=border_thin, bottom=border_thin)
        ws[f"H{row}"].border = openpyxl.styles.Border(right=border_thin, bottom=border_thin)
        ws[f"I{row}"].border = openpyxl.styles.Border(left=border_thin, bottom=border_thin)
    ws.unmerge_cells(f"B128:D128")
    ws.unmerge_cells(f"B129:D129")
    ws.unmerge_cells(f"B130:D130")
    ws.merge_cells(f"B128:D130")
    ws.unmerge_cells(f"E128:H128")
    ws.unmerge_cells(f"E129:H129")
    ws.unmerge_cells(f"E130:H130")
    ws.merge_cells(f"E128:H130")
    ws.unmerge_cells(f"I128:P128")
    ws.unmerge_cells(f"I129:P129")
    ws.unmerge_cells(f"I130:P130")
    ws.merge_cells(f"I128:P130")
    ws.unmerge_cells(f"B131:D131")
    ws.unmerge_cells(f"B132:D132")
    ws.merge_cells(f"B131:D132")
    ws.unmerge_cells(f"E131:H131")
    ws.unmerge_cells(f"E132:H132")
    ws.merge_cells(f"E131:H132")
    ws.unmerge_cells(f"I131:P131")
    ws.unmerge_cells(f"I132:P132")
    ws.merge_cells(f"I131:P132")
    for n in list(range(107, 114)) + list(range(116, 125)) + list(range(127, 144)):
        ws[f"A{n}"].border = openpyxl.styles.Border(right=border_thick)
        ws[f"Q{n}"].border = openpyxl.styles.Border(left=border_thick)
    for col in ["B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P"]:
        for row in [107, 113, 116, 124, 127, 143]:
            ws[f"{col}{row}"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick)
    for n in [113, 124, 143]:
        ws[f"E{n}"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick, left=border_thin)
        ws[f"H{n}"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick, right=border_thin)
    ws["B146"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick, left=border_thick)
    ws["C146"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick)
    ws["D146"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick, right=border_thin)
    ws["E146"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick, left=border_thin)
    ws["F146"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick)
    ws["G146"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick)
    ws["H146"].border = openpyxl.styles.Border(top=border_thick, bottom=border_thick, right=border_thick)
    ws.merge_cells("B146:D146")
    ws.merge_cells("E146:H146")
    ws["B107"] = "Obligatorios generales"
    ws["B116"] = "Obligatorios de Compañía"
    ws["B127"] = "Abonos"
    ws["B107"].font = openpyxl.styles.Font(bold=True)
    ws["B116"].font = openpyxl.styles.Font(bold=True)
    ws["B127"].font = openpyxl.styles.Font(bold=True)
    ws["B108"] = "Citaciones del Directorio"
    ws["B109"] = "Funerales de Cuerpo"
    ws["B110"] = "Romerías de Cuerpo"
    ws["B111"] = "Competencia general"
    ws["B112"] = "Ejercicio general"
    ws["B117"] = "Incendios"
    ws["B118"] = "Ejercicios"
    ws["B119"] = "Academias"
    ws["B120"] = "Sesiones de Compañía"
    ws["B121"] = "Funerales de Compañía"
    ws["B122"] = "Competencia interna"
    ws["B123"] = "Romerías de Compañía"
    ws["B128"] = "Llamados de Comandancia"
    ws["B131"] = "Rescates"
    ws["B133"] = "Apoyo a otros cuerpos"
    ws["B134"] = "Junta de Oficiales"
    ws["B135"] = "Consejo de Disciplina"
    ws["B136"] = "Otros servicios"
    ws["B137"] = "Acuartelamiento"
    ws["B138"] = "Incendios de reserva"
    ws["B139"] = "Delegaciones"
    ws["B140"] = "Ejercicios de guardia"
    ws["B141"] = "Revisión de cuarteles"
    ws["B142"] = "Clave 0-11"
    ws["B113"] = "Subtotal"
    ws["B124"] = "Subtotal"
    ws["B143"] = "Subtotal"
    ws["B113"].font = openpyxl.styles.Font(bold=True)
    ws["B124"].font = openpyxl.styles.Font(bold=True)
    ws["B143"].font = openpyxl.styles.Font(bold=True)
    ws["B146"] = "Total general"
    ws["B146"].font = openpyxl.styles.Font(bold=True)
    for col in ["B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P"]:
        for row in [107, 113, 116, 124, 127, 143]:
            ws[f"{col}{row}"].fill = openpyxl.styles.PatternFill("solid", fgColor="A9D08E")
        for row in [109, 111, 118, 120, 122, 131, 134, 136, 138, 140, 142]:
            ws[f"{col}{row}"].fill = openpyxl.styles.PatternFill("solid", fgColor="E2EFDA")
    for col in ["B", "C", "D", "E", "F", "G", "H"]:
        ws[f"{col}146"].fill = openpyxl.styles.PatternFill("solid", fgColor="A9D08E")
    for row in list(range(108, 114)) + list(range(117, 125)) + list(range(128, 144)) + [146]:
        ws[f"E{row}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
    for row in [113, 124, 143, 146]:
        ws[f"E{row}"].font = openpyxl.styles.Font(bold=True)
    ws["E113"] = "=SUM(E108:E112)"
    ws["E124"] = "=SUM(E117:E123)"
    ws["E143"] = "=SUM(E128:E142)"
    ws["E146"] = "=E113+E124+E143"

    # Add names and assistance
    names = df["Voluntario"].tolist()[4:]
    obgen = df["Ob. Gen."].tolist()[4:]
    obcia = df["Ob. Cía."].tolist()[4:]
    ab = df["Ab."].tolist()[4:]
    dict_obgen = {names[i]: obgen[i] for i in range(len(names))}
    dict_obcia = {names[i]: obcia[i] for i in range(len(names))}
    dict_ab = {names[i]: ab[i] for i in range(len(names))}
    names = sorted(names, key=str.casefold)
    if len(names) > 90:
        for i in range(90):
            ws[f"B{i + 10}"] = i + 1
            ws[f"B{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"C{i + 10}"] = names[i]
            ws[f"D{i + 10}"] = dict_obgen[names[i]]
            ws[f"D{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"E{i + 10}"] = dict_obcia[names[i]]
            ws[f"E{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"F{i + 10}"] = dict_ab[names[i]]
            ws[f"F{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"G{i + 10}"] = 0
            ws[f"G{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"H{i + 10}"] = f"=D{i + 10}+E{i + 10}+F{i + 10}+G{i + 10}"
            ws[f"H{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"H{i + 10}"].font = openpyxl.styles.Font(bold=True)
            if (i + 10) % 2 == 1:
                for col in ["B", "C", "D", "E", "F", "G", "H"]:
                    ws[f"{col}{i + 10}"].fill = openpyxl.styles.PatternFill("solid", fgColor="E2EFDA")
            ws[f"B{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thick)
            ws[f"C{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thick)
            ws[f"D{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thin)
            ws[f"E{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thin, right=border_thin)
            ws[f"F{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thin, right=border_thin)
            ws[f"G{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thin, right=border_thick)
            ws[f"H{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thick)
        for i in range(90, len(names)):
            ws[f"J{i - 80}"] = i + 1
            ws[f"J{i - 80}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"K{i - 80}"] = names[i]
            ws[f"L{i - 80}"] = dict_obgen[names[i]]
            ws[f"L{i - 80}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"M{i - 80}"] = dict_obcia[names[i]]
            ws[f"M{i - 80}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"N{i - 80}"] = dict_ab[names[i]]
            ws[f"N{i - 80}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"O{i - 80}"] = 0
            ws[f"O{i - 80}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"P{i - 80}"] = f"=L{i - 80}+M{i - 80}+N{i - 80}+O{i - 80}"
            ws[f"P{i - 80}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"P{i - 80}"].font = openpyxl.styles.Font(bold=True)
            if (i - 80) % 2 == 1:
                for col in ["J", "K", "L", "M", "N", "O", "P"]:
                    ws[f"{col}{i - 80}"].fill = openpyxl.styles.PatternFill("solid", fgColor="E2EFDA")
            ws[f"J{i - 80}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thick)
            ws[f"K{i - 80}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thick)
            ws[f"L{i - 80}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thin)
            ws[f"M{i - 80}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thin, right=border_thin)
            ws[f"N{i - 80}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thin, right=border_thin)
            ws[f"O{i - 80}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thin, right=border_thick)
            ws[f"P{i - 80}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thick)
        for col in ["B", "C", "D", "E", "F", "G", "H"]:
            ws[f"{col}{100}"].border = openpyxl.styles.Border(top=border_thick)
        for col in ["J", "K", "L", "M", "N", "O", "P"]:
            ws[f"{col}{len(names)-80}"].border = openpyxl.styles.Border(top=border_thick)
    else:
        for i in range(len(names)):
            ws[f"B{i + 10}"] = i + 1
            ws[f"B{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"C{i + 10}"] = names[i]
            ws[f"D{i + 10}"] = dict_obgen[names[i]]
            ws[f"D{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"E{i + 10}"] = dict_obcia[names[i]]
            ws[f"E{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"F{i + 10}"] = dict_ab[names[i]]
            ws[f"F{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"G{i + 10}"] = 0
            ws[f"G{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"H{i + 10}"] = f"=D{i + 10}+E{i + 10}+F{i + 10}+G{i + 10}"
            ws[f"H{i + 10}"].alignment = openpyxl.styles.Alignment(vertical="center", horizontal="center")
            ws[f"H{i + 10}"].font = openpyxl.styles.Font(bold=True)
            if (i + 10) % 2 == 1:
                for col in ["B", "C", "D", "E", "F", "G", "H"]:
                    ws[f"{col}{i + 10}"].fill = openpyxl.styles.PatternFill("solid", fgColor="E2EFDA")
            ws[f"B{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thick)
            ws[f"C{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thick)
            ws[f"D{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thin)
            ws[f"E{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thin, right=border_thin)
            ws[f"F{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thin, right=border_thin)
            ws[f"G{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thin, right=border_thick)
            ws[f"H{i + 10}"].border = openpyxl.styles.Border(top=border_thin, bottom=border_thin,
                                                             left=border_thick, right=border_thick)
        for col in ["B", "C", "D", "E", "F", "G", "H"]:
            ws[f"{col}{len(names)+1}"].border = openpyxl.styles.Border(top=border_thick)

    # Add headers
    for col in ["B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "O", "P"]:
        ws.merge_cells(f"{col}7:{col}9")
        ws[f"{col}7"].fill = openpyxl.styles.PatternFill("solid", fgColor="A9D08E")
        ws[f"{col}7"].font = openpyxl.styles.Font(bold=True)
        if col in ["D", "E", "F", "G", "L", "M", "N", "O"]:
            ws[f"{col}7"].font = openpyxl.styles.Font(size=10, bold=True)
    ws["B7"] = "N.º"
    ws["B7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center")
    ws["C7"] = "Voluntario"
    ws["C7"].alignment = openpyxl.styles.Alignment(vertical="bottom")
    ws["D7"] = "Ob. Gen."
    ws["D7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws["E7"] = "Ob. Cía."
    ws["E7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws["F7"] = "Abonos"
    ws["F7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws["G7"] = "Otros Ab."
    ws["G7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws["H7"] = "Total"
    ws["H7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws["J7"] = "N.º"
    ws["J7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center")
    ws["K7"] = "Voluntario"
    ws["K7"].alignment = openpyxl.styles.Alignment(vertical="bottom")
    ws["L7"] = "Ob. Gen."
    ws["L7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws["M7"] = "Ob. Cía."
    ws["M7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws["N7"] = "Abonos"
    ws["N7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws["O7"] = "Otros Ab."
    ws["O7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws["P7"] = "Total"
    ws["P7"].alignment = openpyxl.styles.Alignment(vertical="bottom", horizontal="center", textRotation=90)
    ws[f"B7"].border = openpyxl.styles.Border(top=border_thick, left=border_thick)
    ws[f"B8"].border = openpyxl.styles.Border(left=border_thick, right=border_thick)
    ws[f"B9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick)
    ws[f"C7"].border = openpyxl.styles.Border(top=border_thick, left=border_thick, right=border_thick)
    ws[f"C8"].border = openpyxl.styles.Border(left=border_thick, right=border_thick)
    ws[f"C9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick, right=border_thick)
    ws[f"D7"].border = openpyxl.styles.Border(top=border_thick, left=border_thick, right=border_thin)
    ws[f"D8"].border = openpyxl.styles.Border(left=border_thick, right=border_thin)
    ws[f"D9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick, right=border_thin)
    ws[f"E7"].border = openpyxl.styles.Border(top=border_thick, left=border_thin, right=border_thin)
    ws[f"E8"].border = openpyxl.styles.Border(left=border_thin, right=border_thin)
    ws[f"E9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thin, right=border_thin)
    ws[f"F7"].border = openpyxl.styles.Border(top=border_thick, left=border_thin, right=border_thin)
    ws[f"F8"].border = openpyxl.styles.Border(left=border_thin, right=border_thin)
    ws[f"F9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thin, right=border_thin)
    ws[f"G7"].border = openpyxl.styles.Border(top=border_thick, left=border_thin, right=border_thick)
    ws[f"G8"].border = openpyxl.styles.Border(left=border_thin, right=border_thick)
    ws[f"G9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thin, right=border_thick)
    ws[f"H7"].border = openpyxl.styles.Border(top=border_thick, left=border_thick, right=border_thick)
    ws[f"H8"].border = openpyxl.styles.Border(right=border_thick)
    ws[f"H9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick, right=border_thick)
    ws[f"J7"].border = openpyxl.styles.Border(top=border_thick, left=border_thick)
    ws[f"J8"].border = openpyxl.styles.Border(left=border_thick, right=border_thick)
    ws[f"J9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick)
    ws[f"K7"].border = openpyxl.styles.Border(top=border_thick, left=border_thick, right=border_thick)
    ws[f"K8"].border = openpyxl.styles.Border(left=border_thick, right=border_thick)
    ws[f"K9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick, right=border_thick)
    ws[f"L7"].border = openpyxl.styles.Border(top=border_thick, left=border_thick, right=border_thin)
    ws[f"L8"].border = openpyxl.styles.Border(left=border_thick, right=border_thin)
    ws[f"L9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick, right=border_thin)
    ws[f"M7"].border = openpyxl.styles.Border(top=border_thick, left=border_thin, right=border_thin)
    ws[f"M8"].border = openpyxl.styles.Border(left=border_thin, right=border_thin)
    ws[f"M9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thin, right=border_thin)
    ws[f"N7"].border = openpyxl.styles.Border(top=border_thick, left=border_thin, right=border_thin)
    ws[f"N8"].border = openpyxl.styles.Border(left=border_thin, right=border_thin)
    ws[f"N9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thin, right=border_thin)
    ws[f"O7"].border = openpyxl.styles.Border(top=border_thick, left=border_thin, right=border_thick)
    ws[f"O8"].border = openpyxl.styles.Border(left=border_thin, right=border_thick)
    ws[f"O9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thin, right=border_thick)
    ws[f"P7"].border = openpyxl.styles.Border(top=border_thick, left=border_thick, right=border_thick)
    ws[f"P8"].border = openpyxl.styles.Border(right=border_thick)
    ws[f"P9"].border = openpyxl.styles.Border(bottom=border_thick, left=border_thick, right=border_thick)

    # Add acts details
    act_numbers = {}
    act_dates = {}
    for act in ["Citaciones del Directorio", "Funerales de Cuerpo", "Romerías de Cuerpo", "Competencia general",
                "Ejercicio general", "Incendios", "Ejercicios", "Academias", "Sesiones de Compañía",
                "Funerales de Compañía", "Competencia interna", "Romerías de Compañía", "Llamados de Comandancia",
                "Rescates", "Apoyo a otros cuerpos", "Junta de Oficiales", "Consejo de Disciplina",
                "Otros servicios", "Acuartelamiento", "Incendios de reserva", "Delegaciones",
                "Ejercicios de guardia", "Revisión de cuarteles", "Clave 0-11"]:
        act_numbers[act] = 0
        act_dates[act] = ""
    for act in col_names[3:]:
        if act[19:] in ["EP", "REG"]:
            act_numbers["Citaciones del Directorio"] += 1
            act_dates["Citaciones del Directorio"] += str(int(act[:2])) + ", "
        if act[19:] in ["FDoM", "FU"]:
            act_numbers["Funerales de Cuerpo"] += 1
            act_dates["Funerales de Cuerpo"] += str(int(act[:2])) + ", "
        if act[19:] in ["RG"]:
            act_numbers["Romerías de Cuerpo"] += 1
            act_dates["Romerías de Cuerpo"] += str(int(act[:2])) + ", "
        if act[19:] in ["COMP-GEN"]:
            act_numbers["Competencia general"] += 1
            act_dates["Competencia general"] += str(int(act[:2])) + ", "
        if act[19:] in ["EJ-GEN"]:
            act_numbers["Ejercicio general"] += 1
            act_dates["Ejercicio general"] += str(int(act[:2])) + ", "
        if act[19:] in ["10-30"]:
            act_numbers["Incendios"] += 1
            act_dates["Incendios"] += str(int(act[:2])) + ", "
        if act[19:] in ["10-34", "EJ"]:
            act_numbers["Ejercicios"] += 1
            act_dates["Ejercicios"] += str(int(act[:2])) + ", "
        if act[19:] in ["AC"]:
            act_numbers["Academias"] += 1
            act_dates["Academias"] += str(int(act[:2])) + ", "
        if act[19:] in ["REC", "ROC"]:
            act_numbers["Sesiones de Compañía"] += 1
            act_dates["Sesiones de Compañía"] += str(int(act[:2])) + ", "
        if act[19:] in ["FQ"]:
            act_numbers["Funerales de Compañía"] += 1
            act_dates["Funerales de Compañía"] += str(int(act[:2])) + ", "
        if act[19:] in ["COMP-INT"]:
            act_numbers["Competencia interna"] += 1
            act_dates["Competencia interna"] += str(int(act[:2])) + ", "
        if act[19:] in ["RC"]:
            act_numbers["Romerías de Compañía"] += 1
            act_dates["Romerías de Compañía"] += str(int(act[:2])) + ", "
        if act[19:] in ["10-0-1", "10-0-2", "10-0-3", "10-0-4", "10-0-5", "10-0-6", "10-1-1", "10-1-2",
                        "10-1-3", "10-1-4", "10-1-5", "10-1-6", "10-1-7", "10-1-8", "10-10-1", "10-10-2",
                        "10-11", "10-13", "10-14", "10-15", "10-16-0", "10-16-5", "10-2", "10-5-1",
                        "10-5-2", "10-5-3", "10-5-4", "10-5-5", "10-6-1", "10-6-2", "10-6-3", "10-7-1",
                        "10-7-2", "10-8", "10-17-0", "10-17-1", "10-17-2", "10-17-3", "10-17-4",
                        "10-17-5", "10-17-6", "10-17-7", "10-17-8", "10-18-0", "10-18-1", "10-18-2", "10-18-3",
                        "10-18-4", "10-18-5", "10-18-6", "10-18-7", "10-18-8"]:
            act_numbers["Llamados de Comandancia"] += 1
            act_dates["Llamados de Comandancia"] += str(int(act[:2])) + ", "
        if act[19:] in ["10-16-3", "10-16-4", "10-3-1", "10-3-2", "10-3-3", "10-3-4", "10-3-5", "10-3-6",
                        "10-3-7", "10-3-8", "10-3-9", "10-4-1", "10-4-2", "10-4-3"]:
            act_numbers["Rescates"] += 1
            act_dates["Rescates"] += str(int(act[:2])) + ", "
        if act[19:] in ["10-12"]:
            act_numbers["Apoyo a otros cuerpos"] += 1
            act_dates["Apoyo a otros cuerpos"] += str(int(act[:2])) + ", "
        if act[19:] in ["JJOO"]:
            act_numbers["Junta de Oficiales"] += 1
            act_dates["Junta de Oficiales"] += str(int(act[:2])) + ", "
        if act[19:] in ["CDis"]:
            act_numbers["Consejo de Disciplina"] += 1
            act_dates["Consejo de Disciplina"] += str(int(act[:2])) + ", "
        if act[19:] in ["10-9"]:
            act_numbers["Otros servicios"] += 1
            act_dates["Otros servicios"] += str(int(act[:2])) + ", "
        if act[19:] in ["ACU"]:
            act_numbers["Acuartelamiento"] += 1
            act_dates["Acuartelamiento"] += str(int(act[:2])) + ", "
        if act[19:] in ["IR"]:
            act_numbers["Incendios de reserva"] += 1
            act_dates["Incendios de reserva"] += str(int(act[:2])) + ", "
        if act[19:] in ["DE"]:
            act_numbers["Delegaciones"] += 1
            act_dates["Delegaciones"] += str(int(act[:2])) + ", "
        if act[19:] in ["EJ-G"]:
            act_numbers["Ejercicios de guardia"] += 1
            act_dates["Ejercicios de guardia"] += str(int(act[:2])) + ", "
        if act[19:] in ["RDC"]:
            act_numbers["Revisión de cuarteles"] += 1
            act_dates["Revisión de cuarteles"] += str(int(act[:2])) + ", "
        if act[19:] in ["C/0-11"]:
            act_numbers["Clave 0-11"] += 1
            act_dates["Clave 0-11"] += str(int(act[:2])) + ", "
    for key, value in act_dates.items():
        if value != "":
            act_dates[key] = "(" + value[:-2] + ")"
    ws["E108"] = act_numbers["Citaciones del Directorio"]
    ws["E109"] = act_numbers["Funerales de Cuerpo"]
    ws["E110"] = act_numbers["Romerías de Cuerpo"]
    ws["E111"] = act_numbers["Competencia general"]
    ws["E112"] = act_numbers["Ejercicio general"]
    ws["E117"] = act_numbers["Incendios"]
    ws["E118"] = act_numbers["Ejercicios"]
    ws["E119"] = act_numbers["Academias"]
    ws["E120"] = act_numbers["Sesiones de Compañía"]
    ws["E121"] = act_numbers["Funerales de Compañía"]
    ws["E122"] = act_numbers["Competencia interna"]
    ws["E123"] = act_numbers["Romerías de Compañía"]
    ws["E128"] = act_numbers["Llamados de Comandancia"]
    ws["E131"] = act_numbers["Rescates"]
    ws["E133"] = act_numbers["Apoyo a otros cuerpos"]
    ws["E134"] = act_numbers["Junta de Oficiales"]
    ws["E135"] = act_numbers["Consejo de Disciplina"]
    ws["E136"] = act_numbers["Otros servicios"]
    ws["E137"] = act_numbers["Acuartelamiento"]
    ws["E138"] = act_numbers["Incendios de reserva"]
    ws["E139"] = act_numbers["Delegaciones"]
    ws["E140"] = act_numbers["Ejercicios de guardia"]
    ws["E141"] = act_numbers["Revisión de cuarteles"]
    ws["E142"] = act_numbers["Clave 0-11"]
    ws["I108"] = act_dates["Citaciones del Directorio"]
    ws["I109"] = act_dates["Funerales de Cuerpo"]
    ws["I110"] = act_dates["Romerías de Cuerpo"]
    ws["I111"] = act_dates["Competencia general"]
    ws["I112"] = act_dates["Ejercicio general"]
    ws["I117"] = act_dates["Incendios"]
    ws["I118"] = act_dates["Ejercicios"]
    ws["I119"] = act_dates["Academias"]
    ws["I120"] = act_dates["Sesiones de Compañía"]
    ws["I121"] = act_dates["Funerales de Compañía"]
    ws["I122"] = act_dates["Competencia interna"]
    ws["I123"] = act_dates["Romerías de Compañía"]
    ws["I128"] = act_dates["Llamados de Comandancia"]
    ws["I131"] = act_dates["Rescates"]
    ws["I133"] = act_dates["Apoyo a otros cuerpos"]
    ws["I134"] = act_dates["Junta de Oficiales"]
    ws["I135"] = act_dates["Consejo de Disciplina"]
    ws["I136"] = act_dates["Otros servicios"]
    ws["I137"] = act_dates["Acuartelamiento"]
    ws["I138"] = act_dates["Incendios de reserva"]
    ws["I139"] = act_dates["Delegaciones"]
    ws["I140"] = act_dates["Ejercicios de guardia"]
    ws["I141"] = act_dates["Revisión de cuarteles"]
    ws["I142"] = act_dates["Clave 0-11"]
    ws["I108"].alignment = openpyxl.styles.Alignment(vertical="center", wrap_text=True)
    ws["I109"].alignment = openpyxl.styles.Alignment(vertical="center", wrap_text=True)

    # Add page breaks
    ws.print_area = "A1:Q200"
    ws.page_setup.fitToPage = True
    ws.page_setup.fitToWidth = 1
    ws.page_setup.fitToHeight = False
    ws.row_breaks.append(pagebreak.Break(100))
    ws.row_breaks.append(pagebreak.Break(200))
    ws.col_breaks.append(pagebreak.Break(17))
    ws.pageSetUpPr = properties.PageSetupProperties(autoPageBreaks=False)
    ws.sheet_view.view = "pageBreakPreview"

    # Save simple report
    name = f"Parte{name[6:]}"
    wb.save(name)
    wb.close()

    # Remove original file after finishing
    os.remove(file)

    gui.show_message(title="Éxito", message="Se han generado correctamente el cuadro y el parte",
                     button_text="Salir")
    return 0


if __name__ == "__main__":
    generate()
